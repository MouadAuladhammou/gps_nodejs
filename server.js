const app = require("./app");

const {
  getVehicleWithSettings,
  manageNotifications,
  getImeisByUser,
  getUserImeisByImei,

  getLatestData,
  setLatestData,
  deleteLatestData,
  isIMEIConnected,
  listKeysForGPSClients,
  checkNotificationKeyExistence,
  addClientGpsToRedis,
  removeClientGpsFromRedis,
  deleteClientGpsRecord,
  isClientGpsInRedis,
  listGpsClientsConnected,
  getConnectedVehiclesCount,

  publishDataToQueues,
  publishDataToEmailQueues,
  consumeMessagesForMongoDB,
  consumeMessagesForSMS,
  consumeMessagesReturnEmail,
} = require("./utils/functions");

const {
  hasSameImeiAndTimestamp,
  getHourlyDateWithoutMinutes,
  isDateToday,
} = require("./utils/helpers");

const { verifySocketToken } = require("./middleware/check_token");

// Socket GPS client (by TCP)
const net = require("net");
const Parser = require("teltonika-parser");
const binutils = require("binutils64");

// Connecter aux bases de donn√©es
const createRedisClient = require("./config/redis");
const { connectMongoDB } = require("./config/mongodb.js");
const { connectMySQL } = require("./config/mysql.js");
connectMongoDB();
connectMySQL();

(async () => {
  var cluster = require("cluster");
  var os = require("os");

  // Initialiser Map qui va contenir les adresses IP de GPS connect√©s
  deleteClientGpsRecord();

  if (cluster.isMaster) {
    console.log(`Master ${process.pid} is running ‚åõÔ∏è`);
    for (var i = 0; i < os.cpus().length; i++) {
      cluster.fork();
    }

    cluster.on("exit", function (worker, code, signal) {
      console.log("worker " + worker.process.pid + " died");
    });
  } else {
    console.log(`Worker ${process.pid} started ‚úÖ`);
    const { createServer } = require("http");
    const httpServer = createServer(app);

    const io = require("socket.io")(httpServer, {
      transports: ["websocket", "polling"],
    });

    const redisClientPromise = await createRedisClient();

    // Methode 1:
    // const { createAdapter } = require("@socket.io/redis-adapter");
    const pubClient = redisClientPromise;
    const subClient = pubClient.duplicate(); // cr√©er une copie ind√©pendante de "redisClient" appel√©e "subscriber". (NB: c'est obligatoire !)
    await subClient.connect();
    // io.adapter(createAdapter(pubClient, subClient));

    // Methode 2:
    const { createAdapter } = require("socket.io-redis");
    io.adapter(createAdapter(pubClient, subClient));
    // ======================================================== [ Test API ] ======================================================== //
    let latitude = 35.6791;
    let longitude = -5.3291;
    let speed = 130;
    app.post("/api/test/post/location", (req, res) => {
      latitude = latitude - 0.0002;
      longitude = longitude - 0.0002;
      speed = Math.floor(Math.random() * (300 - 120 + 1)) + 120;
      const clientIP = req.socket.remoteAddress + ":" + req.socket.remotePort;
      const Server = "Server 2";
      const data = req.body;
      observeChanges("350612076413275", {
        imei: "350612076413275",
        vehicle_id: "350612076413275",
        gps: {
          latitude: latitude,
          longitude: longitude,
          speed: speed,
        },
        ioElements: {
          Ignition: Math.round(Math.random()),
          Movement: Math.round(Math.random()),
          "GSM Signal Strength": 5,
          "Sleep Mode": 0,
          "GNSS Status": 1,
          PDOP: 16,
          HDOP: 13,
          "Ext Voltage": 0,
          "Battery Voltage": 3214,
          "Battery Current": 0,
          "GSM Operator": 60401,
          "Total Odometer": 3116,
        },
        timestamp: new Date("2024-02-22T17:20:57.033+00:00"),
        created_at: new Date(),
      });
      res.json({
        message:
          clientIP +
          " - Donn√©es re√ßues avec succ√®s ! R√©pond√© par serveur : " +
          Server,
      });
    });
    // ============================================================================================================================== //

    consumeMessagesForMongoDB();
    consumeMessagesForSMS();
    consumeMessagesReturnEmail();

    // ============================================================================================================================== //
    // ======================================================[ Socket GPS TCP ]====================================================== //
    // ============================================================================================================================== //
    // NB:
    // Ce code ne permet pas de cr√©er plusieurs serveurs pour chaque client connect√©.
    // Il cr√©e simplement un serveur TCP (trackingServer) avec une connexion active pour chaque client GPS connect√©.
    // Les clients GPS se connectent au serveur et chaque fois qu'un client se connecte, une nouvelle connexion est √©tablie. Toutes les connexions sont g√©r√©es par le m√™me serveur.

    // observer les changements de valeurs IMEI
    const observeChanges = async (imei, values) => {
      const previousValues = await getLatestData(imei);
      setLatestData(imei, values);
      // V√©rifier si les valeurs ont chang√©
      if (!hasSameImeiAndTimestamp(previousValues, values)) {
        // Initialisation de donn√©es de notification (√©tape 1) :
        const vehicleWithSettings = await getVehicleWithSettings(imei);

        // Gestion des notifications (√©tape 2) :
        const valuesWithNotifs = await manageNotifications(
          vehicleWithSettings,
          values
        );

        // Enregistrer la notification en tant que notification horaire (√©tape 3) :
        // NB: Si une notification du m√™me type est d√©tect√©e dans un d√©lai n'exc√©dant pas une heure, alors elle n'est pas enregistr√©e en tant que notification qui doit √™tre affich√©e sur la NavBar
        const hourlyDate = getHourlyDateWithoutMinutes(values.timestamp);
        let emailDataQueue = [];
        if (
          Array.isArray(valuesWithNotifs.notifications) &&
          valuesWithNotifs.notifications.length > 0
        ) {
          // NB: methode "forEach" ne prend pas en charge correctement les fonctions asynchrones. Pour garantir que la variable "valuesWithNotifs" est modifi√© avant de l'envoyer, on peut utiliser une boucle "for...of" avec async/await, qui prend en charge correctement les op√©rations asynchrones.
          for (const notification of valuesWithNotifs.notifications) {
            const notificationKey = `${imei}__${notification.type}__${hourlyDate}`;
            // Que l'utilisateur soit connect√© ou non,enregistrer la notification (par heure) sous invisible (viewedOnNavBar = false) pour l'afficher dans NavBar comme √©tant une notification invisible.
            const isSameNotifOnHour = await checkNotificationKeyExistence(
              notificationKey
            );
            if (!isSameNotifOnHour) {
              notification.viewedOnNavBar = false;
              emailDataQueue.push(notification);
            }
          }
        }

        // Initialiser ID d'utilisateur et ses IMEIs associ√©s
        const { imeis = [], userId = null } = await getUserImeisByImei(imei);

        // Initialiser un canal "gpsDataChannell" pour d√©tecter les changements en temps r√©el des donn√©es du GPS connect√© via TCP afin qu'elles soient d√©tect√©es et accessibles dans le traitement du socket Web.
        const redisClient = redisClientPromise;
        isDateToday(values.timestamp) && // V√©rifier si la date est d'aujourd'hui
          redisClient.publish(
            "gpsDataChannel",
            JSON.stringify({
              imei,
              values: valuesWithNotifs,
              associatedImeis: imeis,
              userId,
            })
          );

        // Envoyer les donn√©es √† RabbitMQ pour consommation
        publishDataToQueues(imei, valuesWithNotifs);

        // Envoyer des donn√©es √† RabbitMQ pour envoyer des e-mails de notification
        emailDataQueue.length > 0 &&
          publishDataToEmailQueues(
            valuesWithNotifs.userId,
            valuesWithNotifs.userEmail,
            valuesWithNotifs.timestamp,
            emailDataQueue
          );
      }
    };

    const sendChartToOpenWebSockets = async (imeis, userId) => {
      if (imeis.length > 0 && userId) {
        const socketIdsInRoom = Array.from(
          io.sockets.adapter.rooms.get(userId) || []
        );

        console.log("socketIdsInRoom - CHART", socketIdsInRoom);
        if (socketIdsInRoom.length > 0 && imeis.length > 0) {
          const { totalVehicles, connectedVehiclesCount } =
            await getConnectedVehiclesCount(imeis);

          console.log(
            "üìäüìä üìäüìä Envoyer le nombre de v√©hicules connect√©s :",
            "chart_" + userId,
            "dans les sockets :",
            socketIdsInRoom
          );
          broadcast(userId, `charts_${userId}`, {
            totalVehicles,
            connectedVehiclesCount,
          });
        }
      }
    };

    const CLIENT_TIMEOUT_DURATION =
      parseInt(process.env.CLIENT_TIMEOUT_DURATION_MS) || 60000;

    const trackingServer = net.createServer((c) => {
      // Initialiser la variable IMEI provenant de la nouvelle connexion TCP
      let imei;

      // D√©finir le d√©lai d'expiration de la connexion TCP de l'appareil
      c.setKeepAlive(true, 500);
      c.setNoDelay(true);
      // d√©finir 60 secondes de TIMEOUT pour chaque appareil GPS connect√©, si cela se produit, il sera automatiquement d√©connect√© du serveur
      c.setTimeout(CLIENT_TIMEOUT_DURATION, () => {
        console.log("Socket Timeout ...");
        closeTCPIPConnection(imei);
      });

      // ceci juste pour tester les erreurs de connexions TCP
      // setInterval(() => {
      //   c.emit("error", new Error("*** Custom error message ***"));
      // }, 138000);

      // Fermer la connexion TCP
      async function closeTCPIPConnection(imei) {
        console.log(
          "close connexion IMEI: ",
          imei + " => " + c.remoteAddress + ":" + c.remotePort
        );

        await deleteLatestData(imei);
        removeClientGpsFromRedis(c);
        console.log(
          "‚úÇÔ∏è‚úÇÔ∏è connexion TCP will be closed",
          c.remoteAddress + ":" + c.remotePort
        );

        // Initialiser les IMEI associ√©s et leur utilisateur
        const { imeis = [], userId = null } = await getUserImeisByImei(imei);

        // √âmet un statut d√©connect√© pour les sockets Web respectifs dans toutes les Workers
        const redisClient = redisClientPromise;
        redisClient.publish(
          "gpsDataChannel",
          JSON.stringify({
            imei,
            values: null,
            isDisconnected: true,
            associatedImeis: imeis,
            userId,
          })
        );

        c.destroy(); // NB: ici, il d√©clenche => c.on("close", () => { ... });
        c.end(); // NB: cela n'a aucun impact !
      }

      // Cr√©er une nouvelle connexion avec un nouveau client GPS connect√© au m√™me serveur
      c.on("data", (data) => {
        try {
          let buffer = data;
          let parser = new Parser(buffer);
          if (parser.isImei) {
            imei = parser.imei;
            c.write(Buffer.alloc(1, 1)); // send ACK for IMEI
            console.log("client device imei connected : " + parser.imei);

            addClientGpsToRedis(c);
            console.log(
              "üèÅüèÅ new client device imei connected from" +
                c.remoteAddress +
                ":" +
                c.remotePort
            );
          } else {
            let avl = parser.getAvl();
            // console.log("Avl: ", JSON.stringify(avl));
            // R√©cup√©rer des donn√©es de l'appareil GPS
            avl.records?.map(
              async ({ gps, timestamp, ioElements: elements }) => {
                let ioElements = {};
                for (let key in elements) {
                  if (elements.hasOwnProperty(key)) {
                    let data = elements[key].value;
                    ioElements[elements[key].label] = data;
                  }
                }

                // Enregistrer les donn√©es dans la base de donn√©es MongoDB
                console.log("gps.longitude re√ßu >>> ", gps.longitude);
                console.log("gps.latitude re√ßu >>> ", gps.latitude);
                if (gps.longitude && gps.latitude) {
                  // mettre √† jour les donn√©es du client GPS avec les derni√®res donn√©es re√ßues pour etre d√©tect√© et envoy√© par la suite dans les web sockets
                  observeChanges(imei, { gps, timestamp, ioElements, imei });
                }

                // r√©initialiser le d√©lai lorsqu'il y a des donn√©es
                c.setTimeout(CLIENT_TIMEOUT_DURATION);

                await listGpsClientsConnected(imei, timestamp);
              }
            );

            let writer = new binutils.BinaryWriter();
            writer.WriteInt32(avl.number_of_data);

            let response = writer.ByteBuffer;
            c.write(response); // send ACK
          }
        } catch (e) {
          console.log("‚ùóÔ∏è‚ùì", e);
        }
      });

      c.on("close", () => {
        console.log("close => client device imei disconnected ... ! ");
        closeTCPIPConnection(imei);
      });

      c.on("end", () => {
        console.log("end => client device imei disconnected ... ! ");
        closeTCPIPConnection(imei);
      });

      c.on("error", (err) => {
        console.log("error => client device imei connection error : ", err);
        closeTCPIPConnection(imei);
      });
    });

    trackingServer.listen(5002, "0.0.0.0", () => {
      console.log("Server listening on 64.226.124.200:5002");
    });

    trackingServer.on("error", (err) => {
      console.error(`Server TCP error: ${err}`);
    });

    // Marque le serveur pour qu'il ne soit plus consid√©r√© comme bloquant
    // trackingServer.unref();

    // ============================================================================================================================== //
    // ==================================================[ Socket Web Application ]================================================== //
    // ============================================================================================================================== //
    io.use((socket, next) => {
      verifySocketToken(socket, next);
    }).on("connection", (socket) => {
      console.log(`üíªüíª Nouvelle connexion Web socket - id: ${socket.id}`);

      socket.on("join", (imeis, callback) => {
        console.log("join ", imeis);
        if (typeof callback === "function") {
          callback({ status: "ok" });
          imeis.forEach(async (imei) => {
            socket.join(imei);
            const isConnected = await isIMEIConnected(imei);
            broadcast(imei, `device_imei_connected_${imei}`, {
              isConnected,
            });
          });
        }
      });

      socket.on("join_charts", async (userId, callback) => {
        console.log("join_charts ", userId);
        if (typeof callback === "function") {
          callback({ status: "ok" });
          socket.join(userId);
          try {
            if (io.sockets.adapter.rooms.has(userId)) {
              const imeis = await getImeisByUser(userId);
              const { totalVehicles, connectedVehiclesCount } =
                await getConnectedVehiclesCount(imeis);

              broadcast(userId, `charts_${userId}`, {
                totalVehicles,
                connectedVehiclesCount,
              });
            }
          } catch (error) {
            console.error(
              "Une erreur s'est produite lors de la v√©rification des IMEI :",
              error
            );
          }
        }
      });

      socket.on("join_notifs", (imeis, callback) => {
        console.log("join_notifs ", imeis);
        if (typeof callback === "function") {
          callback({ status: "ok" });
          imeis.forEach((imei) => {
            socket.join(imei);
          });
        }
      });

      socket.on("disconnecting", () => {
        console.log("disconnecting...");
        // Quitter toutes les salles (rooms) pour le socket Web auquel il appartient
        // NB: La variable "socket.rooms" contient √©galement le m√™me ID de socket web concern√©, mais cela ne pose aucun probl√®me
        socket.rooms.forEach((imei) => {
          socket.leave(imei); // Quitter la salle (identifi√©e par IMEI) correspondante
        });

        console.log(`‚úÇÔ∏è‚úÇÔ∏è Socket Web ${socket.id} a √©t√© d√©connect√©`);
      });
    });

    // D√©tecter les donn√©es qui ont chang√© depuis un IMEI (GPS), puis √† les envoyer √† tous les sockets Web pertinents (NB: incluant les sockets de type "notif")
    // NB: "values" ce sont des donn√©es qui sont envoy√©es par l'appareil GPS
    try {
      const redisClient = redisClientPromise;
      const subscriber = redisClient.duplicate(); // cr√©er une copie ind√©pendante de "redisClient" appel√©e "subscriber". (NB: c'est obligatoire !)

      await subscriber.connect();
      // await subscriber.auth({ password: "admin" });
      // NB Important: Tous les Workers du serveur actuel ou d'autres serveurs peuvent y acc√©der √† ce "message" (Si on utilise Ip Priv√© dans la config Redis)
      await subscriber.subscribe("gpsDataChannel", (message) => {
        const {
          imei,
          values,
          isDisconnected = null,
          associatedImeis = [],
          userId = null,
        } = JSON.parse(message.toString());

        // On peut maintenant g√©rer les donn√©es et les diffuser sur les sockets Web concern√©es
        const socketIdsInRoom = Array.from(
          io.sockets.adapter.rooms.get(imei) || [] // get sockets on this node
        );
        const socketIdsInRoomNotif = Array.from(
          io.sockets.adapter.rooms.get(`${imei}_notif`) || [] // get sockets on this node
        );
        console.log("socketIdsInRoom - IMEI", socketIdsInRoom);
        console.log("socketIdsInRoomNotif", socketIdsInRoomNotif);

        // Verifier d'abord si le message pour se deconnecter lors de la fermeture de la connexion TCP
        // =====================================
        if (isDisconnected && socketIdsInRoom) {
          // √âmet l'√©tat de la connexion connect√©e aux sockets Web respectives
          console.log(
            "‚ùå‚ùå ‚ùå‚ùå Envoyer le signe de deconnexion:",
            "device_imei_connected_" + imei,
            "dans les sockets :",
            socketIdsInRoom
          );
          broadcast(imei, `device_imei_connected_${imei}`, {
            isConnected: false,
          });

          sendChartToOpenWebSockets(associatedImeis, userId);
          return;
        }

        // Envoyer des notifications (√©tape 3) :
        // =====================================
        if (
          values.hasOwnProperty("notifications") &&
          values.notifications.length > 0
        ) {
          // Envoyer des donn√©es de notifications
          if (socketIdsInRoomNotif) {
            console.log(
              "üîîüîî üîîüîî Envoyer les notifications:",
              "device_imei_" + imei + "_notif",
              values.imei,
              "dans les sockets :",
              socketIdsInRoomNotif
            );
            broadcast(
              `${imei}_notif`,
              `device_imei_${imei}_notif`,
              JSON.stringify(values)
            );
          }
        }
        // Envoyer des donn√©es de localisation
        if (socketIdsInRoom) {
          console.log(
            "üöóüöó üöóüöó Envoyer les donn√©es gps:",
            `device_imei_${imei}`,
            values.imei,
            "dans les sockets :",
            socketIdsInRoom
          );
          broadcast(imei, `device_imei_${imei}`, JSON.stringify(values));

          // √âmet l'√©tat de la connexion connect√©e aux sockets Web respectives
          broadcast(imei, `device_imei_connected_${imei}`, {
            isConnected: true,
          });

          sendChartToOpenWebSockets(associatedImeis, userId);
        }
      });
    } catch (e) {
      console.log("‚ùóÔ∏è‚ùì", e);
    }

    function broadcast(imei, eventName, value) {
      // V√©rifier si la salle (room) existe d√©j√†. NB: il verifie cette Romm s'il existe juste dans Worker en cours
      if (io.sockets.adapter.rooms.has(imei)) {
        io.local.to(imei).emit(eventName, value); // NB: "local" => for send to all clients on this node (when using multiple nodes)
        console.log(
          "üöÄüöÄüöÄ Broadcast (On -Worker- " + process.pid + ") to the Room -",
          imei,
          "- and Event :",
          eventName,
          "with Values: ",
          value
        );
      } else {
        console.log(
          `ü§∑‚Äç‚ôÇÔ∏èü§∑‚Äç‚ôÇÔ∏èü§∑‚Äç‚ôÇÔ∏è La salle ${imei} pour ${eventName} n'existe pas ! dans -Worker- ${process.pid}`
        );
      }
    }

    const PORT = process.env.PORT || 5001;
    const HOST = "localhost"; // il n'acceptera que les connexions provenant de reseaux local (gateway).
    httpServer.listen(PORT, HOST, () =>
      console.log(`App listening on port ${PORT}`)
    );

    // ============================================================================================================================== //
    // ===========================================================[ TEST ]=========================================================== //
    // ============================================================================================================================== //
    try {
      const redisClient = await createRedisClient(3);
      const globalValue = await redisClient.get("global_value");
      if (globalValue) {
        const incrementedValue = parseInt(globalValue) + 1;
        await redisClient.set("global_value", incrementedValue, {
          // EX: DEFAULT_CACHE_EXPIRATION,
          XX: true, // Utilisez XX au lieu de NX pour mettre √† jour si la cl√© existe
        });
        console.log("globalValue", incrementedValue); // Afficher la valeur incr√©ment√©e
      } else {
        await redisClient.set("global_value", 1, {
          // EX: DEFAULT_CACHE_EXPIRATION,
          NX: true,
        });
        console.log("globalValue", 1); // Afficher la nouvelle valeur (1)
      }
    } catch (e) {
      console.log("‚ùóÔ∏è‚ùì", e);
    }

    // Ceci juste pour voir ce qui se passe
    /**/
    setInterval(displaySocketInfo, 30000);
    async function displaySocketInfo() {
      console.log("\n");
      console.log(
        "********************************************************************************************************************************************"
      );
      // Obtenir le nombre de sockets TCP pour les appareils GPS connect√©s
      const getConnections = () => {
        return new Promise((resolve, reject) => {
          trackingServer.getConnections((err, count) => {
            if (err) {
              reject(err);
            } else {
              resolve(count);
            }
          });
        });
      };

      try {
        const count = await getConnections();
        console.log(
          `Nombre de sockets TCP pour les appareils GPS connect√©s dans -Worker- ${process.pid} : ${count}`
        );
      } catch (err) {
        console.error("‚ùóÔ∏è‚ùì", err);
      }

      // Obtenir le nombre de sockets Web connect√©s
      const connectedSocketsCount = io.engine.clientsCount;
      console.log(
        `Nombre de sockets Web connect√©es dans -Worker- ${process.pid} : ${connectedSocketsCount}`
      );

      console.log("\n");

      // Pour afficher les sockets ID connect√©s
      console.log(
        `*** Tous les ID de socket Web sont actuellement connect√©s dans -Worker- ${process.pid} : ***`
      );
      console.log([...io.sockets.sockets.keys()]);

      console.log("\n");

      console.log(
        "*** Toutes les salles (rooms) et sockets Web auxquelles il appartient : ***"
      );
      const rooms = io.sockets.adapter.rooms;
      // console.log("Show all rooms : ", rooms.keys());
      for (const room of rooms.keys()) {
        const sockets = await io.in(room).fetchSockets(); // NB Important: si "@socket.io/redis-adapter" est utilis√©, la fonction "fetchSockets()" va r√©cup√®rer toutes les sockets qu'ils appartient dans cette "room" en cours m√™me ces sockets se trouvent dans les autres Workers
        if (room === sockets[0].id) continue;
        console.log("Room : " + room);
        sockets.forEach((socket) => {
          console.log(" ==> Socket: ", socket.id); // Affiche l'ID de la socket
        });
      }

      console.log("\n");

      console.log(
        "*** Toutes les Sockets GPS TCP actuellement connect√©es : ***"
      );
      // console.log("Adresses IP du GPS connect√© : ", gpsClientsConnected);
      await listGpsClientsConnected();

      await listKeysForGPSClients(); // afficher les derni√®res donn√©es re√ßues pour tous les clients GPS IMEI connect√©s

      console.log(
        "********************************************************************************************************************************************"
      );
      console.log("\n");
    }
  }
})();
